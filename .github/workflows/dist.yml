# vim:ts=2:sw=2:et:ai:sts=2
name: 'Build distribution'

on:
  # Only run when pushing to main/merging PRs.
  push:
    branches:
      - 'master'
      - 'force_ci/all/**'     # For development, forcing all workflows to run.
      - 'force_ci/dist/**'    # For debugging and/or only forcing this workflow.

jobs:
  build_wheels:
    name: 'Build wheels'
    runs-on: ${{ matrix.os }}
    env:
      LIBROCKSDB_PATH: /opt/rocksdb-${{ matrix.rocksdb_ver }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rocksdb_ver: ['v6.14.6']

    steps:
      - uses: actions/checkout@v2
        name: 'Checkout source repository'

      - uses: actions/setup-python@v2
        name: 'Set up Python 3.10'
        with:
          python-version: '3.10'

      - name: 'Install cibuildwheel'
        run: |
          python3 -m pip install cibuildwheel==2.0.0

      - name: 'Build wheels'
        run: |
          python3 -m cibuildwheel --output-dir dist
        env:
          CIBW_MANYLINUX_X86_64_IMAGE: 'manylinux2014'
          CIBW_BUILD: 'cp3*'
          CIBW_SKIP: '*-manylinux_i686'
          # Install python package and test-deps.
          CIBW_TEST_REQUIRES: '.[test] pytest'
          # Use `--pyargs` to interpret parameter as module to import, not as a
          # path, and do not use `python3 -m pytest`. This way we prevent
          # importing the module from the current directory instead of the
          # installed package, and failing when it cannot find the shared
          # library.
          CIBW_TEST_COMMAND: 'pytest --pyargs rocksdb'
          # Avoid re-building the C library in every iteration by testing for
          # the build directory.
          CIBW_BEFORE_BUILD: >
            yum install -y bzip2-devel lz4-devel snappy-devel zlib-devel
            python3-Cython && (
              test -d ${{ env.LIBROCKSDB_PATH }} || (
              git clone https://github.com/facebook/rocksdb --depth 1 --branch ${{ matrix.rocksdb_ver }} ${{ env.LIBROCKSDB_PATH }} &&
              cd ${{ env.LIBROCKSDB_PATH }} &&
              CXXFLAGS='-flto -Os -s' PORTABLE=1 make shared_lib -j 4
            )) &&
            pushd ${{ env.LIBROCKSDB_PATH }} &&
            make install-shared &&
            ldconfig &&
            popd
      - uses: actions/upload-artifact@v2
        name: 'Upload build artifacts'
        with:
          path: 'dist/*.whl'

  build_sdist:
    name: 'Build source distribution'
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v2
        name: 'Checkout source repository'

      - uses: actions/setup-python@v4
        name: 'Set up Python 3.10'
        with:
          python-version: '3.10'

      - name: 'Build sdist'
        run: >
          pip3 install pkgconfig cython --upgrade &&
          python3 setup.py sdist

      - uses: actions/upload-artifact@v2
        name: 'Upload build artifacts'
        with:
          path: 'dist/*.tar.gz'



  upload_pypi:
    name: 'Upload packages'
    needs: ['build_wheels', 'build_sdist']
    runs-on: 'ubuntu-latest'
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v2
        name: 'Download artifacts'
        with:
          name: 'artifact'
          path: 'dist'

      - uses: pypa/gh-action-pypi-publish@release/v1
        name: "Publish package to PyPI"
        with:
          user: '__token__'
          password: '${{ secrets.PYPI_API_TOKEN }}'
